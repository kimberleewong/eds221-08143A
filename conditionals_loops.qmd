---
title: "morning practice"
author: "Kimmy Wong"
format: html
editor_options: 
  chunk_output_type: console
---

## logical q's
```{r}
pinyon_pine <- 14 
lodgepole_pine <- 46

# some logical expressions - asking R logical questions, not stating it
pinyon_pine == 10
pinyon_pine < lodgepole_pine 

pinyon_pine != 25

burrito <- 2.4 # Assign an object value

# Write a short 'if' statement:
if (burrito > 2) {
  print("I love burritos!")
}
```

## testing conditionals
```{r}
# if statement
burrito <- 2.4 

if (burrito > 2) {
  print("I love burritos!")
}

# if else statement
pika <- 89.1 

if(pika > 60) {
  print("mega pika")
} else 
  print("normal pika")
```

```{r}
# if else if else statement
marmot <- 2.8 

if(marmot < 0.5) {
  print("small marmot")
} else if(marmot >= 0.5 & marmot < 3) {
  print("medium marmot")
} else
  print("large marmot")
```

```{r}
library(stringr)

my_ships <- c("Millenium Falcon", 
              "X-wing",
              "Tie-Fighter",
              "Death Star")

str_detect(my_ships, pattern = "r") # looks for any values with r
```

```{r}
# if statement using str_detect
phrase <- "I love burritos"

if (str_detect(phrase, "love")) {
  print("burrito fan")
}
```

```{r}
# switch statement
species <- "mouse"

switch(species,
       "cat" = print("meow"),
       "dog" = print("woof"),
       "mouse" = print("squeak"))
```

## intro to For loops
```{r}
dog_names <- c("teddy", "khora", "banjo", "waffle")

for (pupster in dog_names) {
  print(paste0("My dog's name is ", pupster, "."))
}
# paste concatanates strings, paste0 does it w/out spaces
```


```{r}
mass <- seq(from = 0, to = 3, by = 0.5)

mass_1 <- mass[1]
new_value <- mass_1 + 2
print(new_value)

for (i in mass) {
  new_value <- i + 2
  print(new_value)
}
```


```{r}
# using sequence along
mass <- seq(from = 0, to = 3, by = 0.5)

for(i in seq_along(mass)) {
  new_value <- mass[i] + 2
  print(new_value)
}
```


```{r}
tree_height <- c(1, 2, 6, 10)

for (i in seq_along(tree_height)) {
  new_value <- tree_height[i] + tree_height[i + 1]
  print(new_value)
}
```

## conditional for loops
```{r}
animals <- c("cat", "dog", "dog", "zebra", "dog")

for (i in seq_along(animals)) {
  if (animals[i] == "dog") {
  print("I love dogs")
} else 
  print("this not dog")
}

for (i in animals) {
  if (i == "dog") {
  print("I love dogs")
} else 
  print("this not dog")
}
```

```{r}
species <- c("dog", "elephant", "goat", "dog", "dog", "elephant")

age_human <- c(3, 8, 4, 6, 12, 18)

for (i in seq_along(species)) {
if (species[i] == "dog") {
  animal_age <- age_human[i] * 7
} else if (species[i] == "elephant") {
  animal_age <- age_human[i] * 0.88
} else if (species [i] == "goat") {
  animal_age <- age_human[i] * 4.7
}
  print(animal_age)
}
```

## storing for loop output
```{r}
# create an empty vector for animal ages
animal_ages <- vector(mode = "numeric", length = length(species))

species <- c("dog", "elephant", "goat", "dog", "dog", "elephant")

age_human <- c(3, 8, 4, 6, 12, 18)

for (i in seq_along(species)) {
if (species[i] == "dog") {
  animal_age <- age_human[i] * 7
} else if (species[i] == "elephant") {
  animal_age <- age_human[i] * 0.88
} else if (species [i] == "goat") {
  animal_age <- age_human[i] * 4.7
}
  animal_ages[i] <- animal_age
}
animal_ages
```

```{r}
tigers <- c(29, 34, 82)
lions <- c(2, 18, 6)

big_cats <- vector(mode = "numeric", length = length(tigers))

for(i in seq_along(tigers)) {
  total_cats <- tigers[i] + lions [i]
  big_cats[i] <- total_cats
}
big_cats
```

```{r}
mean_mtcars <- vector(mode = "numeric", length = ncol(mtcars))

for(i in 1:ncol(mtcars)) {
  mean_value <- mean(mtcars[[i]], na.rm = TRUE)
  mean_mtcars[i] <- mean_value
}
```

# looping for means but conditional - excluding a col
```{r}
library(palmerpenguins)

for(i in 1:ncol(penguins)) {
  if(is.numeric(penguins[[i]])) {
  penguin_median <- median(penguins[[i]], na.rm = TRUE)
  print(penguin_median)
} else {
  print("non-numeric column")
}
}
```

## check out apply!
```{r}
apply(X = mtcars, MARGIN = 2, FUN = mean)
```

```{r}
library(tidyverse)

penguins %>% 
  group_by(species) %>% 
  summarise(across(where(is.numeric), mean, na.rm = TRUE))
```

```{r}
library(purrr)

map(.x = mtcars, .f = mean)
map_df(mtcars, mean)
```




